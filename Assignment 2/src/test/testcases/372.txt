
        Class SortAlgorithms {
			selectionSort(arr: Array[Int, 100])
            {
				Var n: Int = arr.length();
			
				## One by one move boundary of unsorted subarray ##
				Foreach (i In 1 .. (n-1) By 1)
				{
					## Find the minimum element in unsorted array ##
					Var min_idx: Int = i;
					Foreach (j In (i+1) .. n By 1) {
						If (arr[j] < arr[min_idx]) {
							min_idx = j;
						}
					}
					## Swap the found minimum element with the first element ##
					Var temp: Int = arr[min_idx];
					arr[min_idx] = arr[i];
					arr[i] = temp;
				}
            }
            
            bubbleSort(arr: Array[Int, 100])
            {
				Var n: Int = arr.length();
				Foreach (i In 0 .. (n-1) By 1) {
					Foreach (j In 0 .. (n-i-1) By 1) {
						If (arr[j] > arr[j+1])
						{
							Var temp: Int = arr[j];
							arr[j] = arr[j+1];
							arr[j+1] = temp;
						}
					}
				}
            }
            
            insertionSortRecursive(arr: Array[Int, 100]; n: Int)
            {
				## Base case ##
				If (n <= 1) {
					Return;
				}
            
				## Sort first n-1 elements ##
				Self.insertionSortRecursive(arr, n-1);
            
				## Insert last element at its correct position in sorted array. ##
				Var last: Int = arr[n-1];

				##
				Move elements of arr[0..i-1], that are
				greater than key, to one position ahead
				of their current position
				##
				Foreach (j In (n-2) .. 0 By -1) {
					If (arr[j] > last) {
						Break;
					}
					arr[j+1] = arr[j];
				}
				arr[j+1] = last;
            }
            
            insertionSort(arr: Array[Int, 100]; left: Int; right: Int)
            {
				Foreach (i In (left + 1) .. right By 1)
				{
					Var temp: Int = arr[i];
					Var j: Int = i - 1;
					Foreach (j In (i - 1) .. left By -1) {
						If (arr[j] > temp) {
							Break;
						}
						arr[j+1] = arr[j];
						j = j + 1;
					}
					arr[j+1] = temp;
				}
            }
		}
        