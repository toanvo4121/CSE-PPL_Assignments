
        Class SortAlgorithms {
			merge(array: Array[Int, 100]; left: Int; mid: Int; right: Int)
            {
				Val subArrayOne: Int = mid - left + 1;
				Val subArrayTwo: Int = right - mid;
				
				## Create temp arrays ##
				Var leftArray, rightArray: Array[Int, 50];
				
				## Copy data to temp arrays leftArray[] and rightArray[] ##
				Foreach (i In 0 .. subArrayOne By 1) {
					leftArray[i] = array[left + i];
				}
				Foreach (j In 0 .. subArrayTwo By 1) {
					rightArray[j] = array[mid + 1 + j];
				}
				
				Var indexOfSubArrayOne, indexOfSubArrayTwo, indexOfMergedArray: Int = 0, 0, left;
				
				## Merge the temp arrays back into array[left..right] ##
				Foreach (i In 0 .. ((indexOfSubArrayOne < subArrayOne) && (indexOfSubArrayTwo < subArrayTwo)) By 1) {
					If (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo]) {
						array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
						indexOfSubArrayOne = indexOfSubArrayOne + 1;
					}
					Else {
						array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
						indexOfSubArrayTwo = indexOfSubArrayTwo + 1;
					}
					indexOfMergedArray = indexOfMergedArray + 1;
				}
				## Copy the remaining elements of left[], if there are any ##
				Foreach (i In indexOfSubArrayOne .. (indexOfSubArrayOne < subArrayOne) By 1)
				{
					array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
					indexOfSubArrayOne = indexOfSubArrayOne + 1;
					indexOfMergedArray = indexOfMergedArray + 1;
				}
				## Copy the remaining elements of right[], if there are any ##
				Foreach (i In indexOfSubArrayTwo .. (indexOfSubArrayTwo < subArrayTwo) By 1) {
					array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
					indexOfSubArrayTwo = indexOfSubArrayTwo + 1;
					indexOfMergedArray = indexOfMergedArray + 1;
				}
            }
            
            ## begin is for left index and end is right index of the sub-array of arr to be sorted ##
            mergeSort(array: Array[Int, 100]; begin: Int; end: Int)
            {
				If (begin >= end) {
					Return; 
				}
				Var mid: Int = begin + (end - begin) / 2;
				Self.mergeSort(array, begin, mid);
				Self.mergeSort(array, mid + 1, end);
				Self.merge(array, begin, mid, end);
            }
            
            swap(arr: Array[Int, 100]; i: Int; j: Int)
            {
				Var temp: Int = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			
			## This function takes last element as pivot, places
			the pivot element at its correct position in sorted
			array, and places all smaller (smaller than pivot)
			to left of pivot and all greater elements to right
			of pivot ##
			partition(arr: Array[Int, 100]; low: Int; high: Int)
			{
				Var pivot: Int = arr[high];
				
				## Index of smaller element and indicates the right position of pivot found so far ##
				Var i: Int = (low - 1);
				Foreach (j In low .. (high - 1) By 1)
				{
					If (arr[j] < pivot)
					{
						i = i + 1;
						Self.swap(arr, i, j);
					}
				}
				Self.swap(arr, i + 1, high);
				Return (i + 1);
			}
				
			## The main function that implements QuickSort
				arr[] --> Array to be sorted,
				low --> Starting index,
				high --> Ending index
			##
			quickSort(arr: Array[Int, 100]; low: Int; high: Int)
			{
				If (low < high)
				{
					Var pi: Int = Self.partition(arr, low, high);
					Self.quickSort(arr, low, pi - 1);
					Self.quickSort(arr, pi + 1, high);
				}
            }
            
            insertionSort(arr: Array[Int, 100]; left: Int; right: Int)
            {
				Foreach (i In (left + 1) .. right By 1)
				{
					Var temp: Int = arr[i];
					Var j: Int = i - 1;
					Foreach (j In (i - 1) .. left By -1) {
						If (arr[j] > temp) {
							Break;
						}
						arr[j+1] = arr[j];
						j = j + 1;
					}
					arr[j+1] = temp;
				}
            }
            
            timSort(arr: Array[Int, 100]; n: Int)
            {
				Foreach (i In 0 .. n By testAlgorithms::$RUN) {
					Self.insertionSort(arr, i, Algorithms.min((i + testAlgorithms::$RUN - 1), (n - 1)));
				}
				Foreach (size In RUN .. n)
				{
					Foreach (left In 0 .. n By (2*size))
					{
						Var mid: Int = left + size - 1;
						Var right: Int = Algorithms.min((left + 2*size - 1), (n-1));
						If (mid < right) {
                        Self.merge(arr, left, mid, right);
						}
					}
                  	size = size * 2;
				}
            }
		}
        