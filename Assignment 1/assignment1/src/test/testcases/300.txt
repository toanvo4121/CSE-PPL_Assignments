
         Class DeleteMid {  
         ##Represent a node of the doubly linked list##
         }
         
         Class Node{  
            Var data:Int;
            Var previous,next :Node;    
      
            Constructor(datas:Int) {  
                  Self.data = data;  
            }  
         }  
      
         Class My{
            Var size:Int = 0; 
         ##Represent the head and tail of the doubly linked list  ##
            Var head, tail :Node;    
            
         ##addNode() will add a node to the list  ##
            addNode(data:Int) {
            ## Create a new node ##
            Var newNode : Node = New Node(data);  
      
            ##If list is empty  ##
            If(head == null) {  
                  ##Both head and tail will point to newNode  ##
                     head =  newNode;  
                     tail =  newNode; 
                  ##head's previous will point to null## 
                     head.previous = null;  
                  ##tail's next will point to null, as it is the last node of the list  ##
                     tail.next = null;  
            }  
            Else {  
                  ##newNode will be added after tail such that tail's next will point to newNode  ##
                     tail.next = newNode;  
                  ##newNode's previous will point to tail  ##
                     newNode.previous = tail;  
                  ##newNode will become new tail  ##
                     tail = newNode;  
                  ##As it is last node, tail's next will point to null  ##
                     tail.next = null;  
            }  
            ##Size will count the number of nodes present in the list ## 
            size = size + 1;  
         }  
      
         ##deleteFromMid() will delete a node from middle of the list ## 
         deleteFromMid() {  
            ##Checks whether list is empty  ##
            If(head == null) {  
                  Return;  
            }  
            Else {  
                  ##current will point to head  ##
                  Var current : Node = head;
      
                  ##Store the mid position of the list  ##
                  Var mid: Int = (size+1)/2 ; 
      
                  ##Iterate through list till current points to mid position  ##              
                  Foreach(i In i .. mid By qq) {  
                     current = current.next;   
                  }   
      
                  ##If middle node is head of the list  ##
                  If(current == head) {  
                     head = current.next;  
                  }  
                  ##If middle node is tail of the list  ##
                  Elseif(current == tail) {  
                     tail = tail.previous;  
                  }  
                  Else {  
                     current.previous.next = current.next;  
                     current.next.previous = current.previous;  
                  }  
                  ##Delete the middle node  ##
                  current = null;  
            }  
            size = size - 1;   
         }  
        Bla(){
            ##Node current will point to head  ##
            Var current : Node = head;  
            If(head == Null) {  
                  out.println(empty);  
                  Return;  
            }  
            If(current != Null) {  
                  ##Prints each node by incrementing the pointer.  ##
                  out.print(current.data );  
                  current = current.next;  
            }  
            out.println();  
         }  
      
         main() {  
            Var dList : DeleteMid = New DeleteMid();   
            ##Add nodes to the list##  
            dList.addNode(1);  
            dList.addNode(2);  
            dList.addNode(3);  
      
            ##Printing original list  ##
            out.println(Original_List);  
            dList.display();  
            If(dList.head != Null) {  
                  dList.deleteFromMid();  
                  ##Printing updated list  ##
                  out.println(Updated_List);  
                  dList.display();  
            }  
         }  
      }   